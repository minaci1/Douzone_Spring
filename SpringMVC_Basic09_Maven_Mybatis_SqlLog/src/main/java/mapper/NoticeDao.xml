<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--  
KET POINT
1. Mybatis Mapper 작업시

1.1 mapper namespace="" 명은 DAO의 인터페이스와 동일하게 약속
1.2 DAO인터페이스 와 mapper 동기화 (함수명과  <select id="" 동일)
1.3 interface 와 mapper 만 있으면 DB작업
	//게시물 개수
	int getCount(String field, String query) throws ClassNotFoundException, SQLException;
    >>parameter  하나 이상이면 Map 사용 ...하자...

	//전체 게시물
	List<Notice> getNotices(int page, String field, String query) throws ClassNotFoundException, SQLException;
	
	//게시물 삭제
	int delete(String seq) throws ClassNotFoundException, SQLException;
	
	//게시물 수정
	int update(Notice notice) throws ClassNotFoundException, SQLException;
	
	//게시물 상세
	Notice getNotice(String seq) throws ClassNotFoundException, SQLException;
	
	//게시물 입력
	 int insert(Notice n) throws ClassNotFoundException, SQLException; 

	<insert id="" parameterType="vo.Notice">
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES( (SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES), #{title}, #{content}, 'kosauser', SYSDATE, 0, #{fileSrc},#{fileSrc})
	</insert>
-->
<mapper namespace="dao.NoticeDao" >
	<!-- 
	int getCount(String field, String query)
	1. parameter 1개  :  생략 or parameterType="int"
	2. parameter DTO :   parameterType="vo.notice"
	3. parameter DTO 아니고 2개 이상인 경우
	3.1 hashMap >> map.put(key,value) >> parameterType="hashMap" 권장
	3.2 mybatis parameter read 할때 : param1 , param2 , param3 >> 키워드 제공	
	
	
    ex)int getCount(String field, String query)
    param1 >> String field
    param2 >> String query
	 -->


	<select id="getCount"  resultType="int">
		SELECT COUNT(*) CNT FROM NOTICES WHERE ${param1} LIKE '%${param2}%'
	</select>
	
	<!-- List<Notice> getNotices(int page, String field, String query)  
	     
	     int page => param1
	     String field => param2
	     String query => param3
	
		int srow = 1 + (page-1)*5;  >> 1 + (${param1}-1)*5
		int erow = 5 + (page-1)*5;  >> 5 + (${param1}-1)*5;
	-->
	<select id="getNotices" resultType="vo.Notice" >
		SELECT * FROM
			         (   SELECT ROWNUM NUM, N.* 
			             FROM (
			             		SELECT * 
			             		FROM NOTICES 
			             		WHERE ${param2} LIKE '%${param3}%' ORDER BY REGDATE DESC
			             	  ) N
		             ) 	WHERE NUM BETWEEN 1 + (${param1}-1)*5 AND 5 + (${param1}-1)*5
	</select>
	
	<!--
	int delete(String seq) 
	parameter 1개 : 생략 하거나 ... 타입
	 -->
	<delete id="delete">
		DELETE NOTICES WHERE SEQ=#{seq}
	</delete>
	
	<!--  int update(Notice notice) -->
	<update id="update" parameterType="vo.Notice">
		UPDATE notices
		SET title   = #{title} ,
		    content = #{content} , 
		    filesrc = #{fileSrc} ,
		    filesrc2= #{fileSrc2}
		WHERE seq= #{seq}
	</update>
	
	<!-- Notice getNotice(String seq)  return type dto 객체 (vo.Notice) -->
	<select id="getNotice" resultType="vo.Notice">
		SELECT seq,title,writer,content,regdate,hit,filesrc,filesrc2 
		FROM NOTICES 
		WHERE SEQ=#{seq}
	</select>
	
	<!--  int insert(Notice n) -->
	<insert id="insert" parameterType="vo.Notice">
		<selectKey order="BEFORE" keyProperty="seq" resultType="String">
			SELECT MAX(TO_NUMBER(SEQ))+1 FROM NOTICES
		</selectKey>
		INSERT INTO NOTICES(SEQ, TITLE, CONTENT, WRITER, REGDATE, HIT, FILESRC , FILESRC2) 
		VALUES(#{seq}, #{title}, #{content}, 'kosauser', SYSDATE, 0, #{fileSrc},#{fileSrc})
	</insert>
</mapper>

